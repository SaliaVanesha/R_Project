# --- Hotel Bookings Analysis ---

# 1. SETUP: Load necessary libraries
 install.packages(c("tidyverse", "janitor", "skimr", "lubridate")) # Run once if not installed
library(tidyverse) # For data manipulation (dplyr, ggplot2, etc.) and reading data (readr)
library(janitor)   # For cleaning column names
library(skimr)     # For quick summary statistics
library(lubridate) # For easier date handling (though not strictly used for parsing in this example's mock data)

# 2. DATA LOADING AND PREPARATION
# Attempt to load the dataset. If not found, use a mock dataset for demonstration.
# The real dataset is assumed to have columns like:
# hotel, is_canceled, lead_time, arrival_date_year, arrival_date_month, adr, adults, children, etc.
data_file <- "hotel_bookings.csv"
if (file.exists(data_file)) {
  hotel_bookings_raw <- read_csv(data_file)
} else {
  print("Warning: 'hotel_bookings.csv' not found. Using a mock dataset.")
  set.seed(42) # For reproducibility of mock data
  hotel_bookings_raw <- tibble(
    Hotel = rep(c("Resort Hotel", "City Hotel"), 500),
    `Is Canceled` = sample(0:1, 1000, replace = TRUE, prob = c(0.7, 0.3)),
    `Lead Time` = rpois(1000, lambda = 100),
    `Arrival Date Year` = sample(2015:2017, 1000, replace = TRUE),
    `Arrival Date Month` = sample(month.name, 1000, replace = TRUE),
    ADR = rnorm(1000, mean = 120, sd = 50),
    Adults = sample(1:4, 1000, replace = TRUE, prob = c(0.1, 0.7, 0.15, 0.05)),
    Children = sample(0:2, 1000, replace = TRUE, prob = c(0.8, 0.15, 0.05)),
    Country = sample(c("PRT", "GBR", "FRA", "ESP", "DEU", "ITA", "OTHER"), 1000, replace = TRUE, prob=c(0.4,0.1,0.1,0.1,0.1,0.05,0.15))
  )
}

hotel_bookings <- hotel_bookings_raw %>%
  clean_names() %>% # Standardize column names (e.g., is_canceled)
  mutate(
    # Convert month name to an ordered factor for correct plotting
    arrival_date_month = factor(arrival_date_month, levels = month.name),
    # Ensure adr is not negative (common cleaning step for this dataset)
    adr = ifelse(adr < 0, 0, adr),
    # Create a total guests column (example of feature engineering)
    total_guests = adults + children # Assuming 'babies' column might also exist in full dataset
  )

# 3. INITIAL EXPLORATION
print("--- First 6 rows of cleaned data ---")
print(head(hotel_bookings))

print("--- Glimpse of data structure ---")
glimpse(hotel_bookings)

print("--- Summary statistics using skimr (selected columns) ---")
# Skim provides a comprehensive overview. We select a few key stats.
skim_output <- skim(hotel_bookings %>% select(hotel, is_canceled, lead_time, adr, total_guests, arrival_date_month))
print(skim_output %>% select(skim_type, skim_variable, n_missing, complete_rate, numeric.mean, numeric.sd, numeric.hist, factor.ordered, factor.n_unique, factor.top_counts))


# 4. KEY ANALYTICAL QUESTIONS & VISUALIZATIONS

# Q1: What are the overall booking numbers and cancellation rates by hotel type?
hotel_summary <- hotel_bookings %>%
  group_by(hotel) %>%
  summarise(
    total_bookings = n(),
    canceled_bookings = sum(is_canceled),
    cancellation_rate = mean(is_canceled),
    avg_lead_time = mean(lead_time, na.rm = TRUE),
    avg_adr = mean(adr, na.rm = TRUE),
    .groups = "drop"
  )
print("--- Summary by Hotel Type ---")
print(hotel_summary)

plot_hotel_cancellation <- ggplot(hotel_summary, aes(x = hotel, y = cancellation_rate, fill = hotel)) +
  geom_col() +
  geom_text(aes(label = scales::percent(cancellation_rate, accuracy = 0.1)), vjust = -0.5) +
  scale_y_continuous(labels = scales::percent) +
  labs(title = "Cancellation Rate by Hotel Type", y = "Cancellation Rate") +
  theme_minimal()
# print(plot_hotel_cancellation) # This would display the plot

# Q2: How does ADR vary by month and hotel type?
adr_monthly_summary <- hotel_bookings %>%
  filter(!is.na(arrival_date_month)) %>% # Ensure no NA months if any
  group_by(hotel, arrival_date_month) %>%
  summarise(average_adr = mean(adr, na.rm = TRUE), .groups = "drop")

print("--- Average ADR by Month and Hotel Type (First 6 rows) ---")
print(head(adr_monthly_summary))

plot_adr_monthly <- ggplot(adr_monthly_summary, aes(x = arrival_date_month, y = average_adr, group = hotel, color = hotel)) +
  geom_line(linewidth = 1) +
  geom_point(size = 2) +
  labs(title = "Average Daily Rate (ADR) by Month and Hotel Type",
       x = "Month", y = "Average ADR") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
# print(plot_adr_monthly)

# Q3: What is the distribution of lead times?
plot_lead_time_dist <- ggplot(hotel_bookings, aes(x = lead_time)) +
  geom_histogram(aes(y = ..density..), binwidth = 30, fill = "skyblue", color = "black", alpha = 0.7) +
  geom_density(color = "red", linewidth = 1) +
  facet_wrap(~hotel, scales = "free_y") + # Show separately for each hotel type
  labs(title = "Distribution of Lead Time", x = "Lead Time (days)", y = "Density") +
  xlim(0, 750) + # Limiting x-axis for better visualization of common lead times
  theme_minimal()
# print(plot_lead_time_dist)

# Q4: Relationship between lead time and cancellation
# Create lead time bins for easier analysis
hotel_bookings_lt_binned <- hotel_bookings %>%
  mutate(lead_time_group = cut(lead_time,
                               breaks = c(-Inf, 0, 30, 90, 180, 365, Inf),
                               labels = c("Same Day", "1-30 Days", "31-90 Days", "91-180 Days", "181-365 Days", "365+ Days")))

cancellation_by_lead_group <- hotel_bookings_lt_binned %>%
  group_by(hotel, lead_time_group) %>%
  summarise(cancellation_rate = mean(is_canceled),
            num_bookings = n(),
            .groups = "drop") %>%
  filter(num_bookings > 20) # Only show groups with a reasonable number of bookings

print("--- Cancellation Rate by Lead Time Group ---")
print(cancellation_by_lead_group)

plot_cancellation_lead_time <- ggplot(cancellation_by_lead_group, aes(x = lead_time_group, y = cancellation_rate, fill = hotel)) +
  geom_col(position = "dodge") +
  scale_y_continuous(labels = scales::percent) +
  labs(title = "Cancellation Rate by Lead Time Group and Hotel",
       x = "Lead Time Group", y = "Cancellation Rate") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
# print(plot_cancellation_lead_time)

print("--- Analysis Complete ---")
